using Microsoft.SqlServer.Management.Sdk.Sfc;
using Microsoft.SqlServer.Management.Smo;
using Microsoft.SqlServer.Management.Common;
using SqlServerWebAdmin.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Collections.Specialized;

namespace SqlServerWebAdmin
{
    //https://www.mssqltips.com/sqlservertip/1833/generate-scripts-for-database-objects-with-smo-for-sql-server/
    //http://www.mattjcowan.com/funcoding/2012/04/21/scripting-your-sql-database-using-smo-and-the-command-line/
    public partial class Export : System.Web.UI.Page
    {
        protected void Page_Load(object sender, System.EventArgs e)
        {
            Microsoft.SqlServer.Management.Smo.Server server = DbExtensions.CurrentServer;

            try
            {
                server.Connect();
            }
            catch (System.Exception ex)
            {
                //Response.Redirect("Error.aspx?errorPassCode=" + 2002);
                Response.Redirect(String.Format("error.aspx?errormsg={0}&stacktrace={1}", Server.UrlEncode(ex.Message), Server.UrlEncode(ex.StackTrace)));
            }
            DatabaseCollection databases = server.Databases;
            server.Disconnect();

            // Clear out list and populate with database names
            if (!IsPostBack)
            {
                ExportDatabaseList.Items.Clear();

                for (int i = 0; i < databases.Count; i++)
                {
                    ExportDatabaseList.Items.Add(new ListItem(databases[i].Name));
                }

                ExportDatabaseList.Items.FindByValue(Request["database"]).Selected = true;
            }
        }

        protected void ExportButton_Click(object sender, System.EventArgs e)
        {
            // Do the export - this will just pop open a Save As dialog box
            string databaseName = this.ExportDatabaseList.SelectedItem.Text;
            bool scriptDatabase = this.ScriptDatabaseCheckBox.Checked;
            bool scriptDrop = this.ScriptDropCheckBox.Checked;
            bool scriptTableSchema = this.ScriptTableSchemeCheckBox.Checked;
            bool scriptTableData = this.ScriptTableDataCheckBox.Checked;
            bool scriptStoredProcedures = this.ScriptStoredProceduresCheckBox.Checked;
            bool scriptComments = this.ScriptCommentsCheckBox.Checked;

            // Set the filename to consist of only valid filename chars: [A-Za-z0-9]
            string filename = "";
            for (int i = 0; i < databaseName.Length; i++)
            {
                if (IsValidChar(databaseName[i]))
                    filename += databaseName[i];
            }

            Microsoft.SqlServer.Management.Smo.Server server = DbExtensions.CurrentServer;

            try
            {
                server.Connect();
            }
            catch (System.Exception ex)
            {
                //Response.Redirect("Error.aspx?errorPassCode=" + 2002);
                Response.Redirect(String.Format("error.aspx?errormsg={0}&stacktrace={1}", Server.UrlEncode(ex.Message), Server.UrlEncode(ex.StackTrace)));
            }

            Database database = server.Databases[databaseName];
            if (database == null)
            {
                server.Disconnect();

                // Database doesn't exist - break out and go to error page
                Response.Redirect(String.Format("error.aspx?error={0}", 1000));
                return;
            }

            TableCollection tables = database.Tables;
            StoredProcedureCollection sprocs = database.StoredProcedures;

            StringBuilder scriptResult = new StringBuilder();
            scriptResult.Append(String.Format("/* Generated by Web Data Administrator on {0} */\r\n\r\n", DateTime.Now.ToString()));
            scriptResult.Append("/* Options selected: ");
            if (scriptDatabase) scriptResult.Append("database ");
            if (scriptDrop) scriptResult.Append("drop-commands ");
            if (scriptTableSchema) scriptResult.Append("table-schema ");
            if (scriptTableData) scriptResult.Append("table-data ");
            if (scriptStoredProcedures) scriptResult.Append("stored-procedures ");
            if (scriptComments) scriptResult.Append("comments ");
            scriptResult.Append(" */\r\n\r\n");

            Scripter scr = new Scripter(server);
            //server.SetDefaultInitFields(typeof(Microsoft.SqlServer.Management.Smo.View), "IsSystemObject");

            ScriptingOptions options = new ScriptingOptions();
            //options.AppendToFile = true;
            //options.AnsiFile = true;
            //options.AnsiPadding = true;
            //options.ChangeTracking = true;
            //options.ToFileOnly = true;
            options.ClusteredIndexes = true;
            options.ContinueScriptingOnError = false;
            options.DriAll = true;
            options.IncludeHeaders = true;
            options.IncludeIfNotExists = true;
            options.Indexes = true;
            //options.Default = true;
            options.WithDependencies = true;

           
            //options.TargetServerVersion = SqlServerVersion.Version100;
            
            //options.Permissions = true;
            //options.ExtendedProperties = true;

            //options.ScriptDrops = false;
            //options.ScriptSchema = scriptTableSchema;
            //options.ScriptData = scriptTableData;

            scr.ScriptingProgress += (q, w) => { var t = 1; };
            scr.Options = options;

            Microsoft.SqlServer.Management.Smo.Table[] tbls = new Microsoft.SqlServer.Management.Smo.Table[database.Tables.Count];
            database.Tables.CopyTo(tbls, 0);
            scr.Script(tbls);

            Microsoft.SqlServer.Management.Smo.View[] view = new Microsoft.SqlServer.Management.Smo.View[1];
            for (int idx = 0; idx < database.Views.Count; idx++)
            {
                if (!database.Views[idx].IsSystemObject)
                {
                    view[0] = database.Views[idx];
                    scr.Script(view);
                }
            }



            // Script flow:
            // DROP and CREATE database
            // use [database]
            // GO
            // DROP sprocs
            // DROP tables
            // CREATE tables without constraints
            // Add table data
            // Add table constraints
            // CREATE sprocs

            // Drop and create database
            if (scriptDatabase)
            {
                scriptResult.Append(ScriptObject(new Urn[] { database.Urn }, scr));
            }

            // Drop stored procedures
            ////Drop tables (this includes schemas)
            if (scriptDrop)
            {
                Scripter scripter = new Scripter(server);
                scripter.Options.ScriptDrops = true;

                foreach (Microsoft.SqlServer.Management.Smo.Table tb in database.Tables)
                {
                    if (!tb.IsSystemObject)
                    {
                        scriptResult.Append(ScriptObject(new Urn[] { tb.Urn }, scripter));
                    }
                }


                if (scriptTableSchema)
                {
                    server.SetDefaultInitFields(typeof(Microsoft.SqlServer.Management.Smo.Table), "IsSystemObject");
                    foreach (Microsoft.SqlServer.Management.Smo.Table tb in database.Tables)
                    {
                        if (!tb.IsSystemObject)
                        {
                            scriptResult.Append(ScriptObject(new Urn[] { tb.Urn }, scripter));
                        }
                    }
                }
                if (scriptStoredProcedures)
                {
                    server.SetDefaultInitFields(typeof(Microsoft.SqlServer.Management.Smo.View),
                                                "IsSystemObject");
                    foreach (Microsoft.SqlServer.Management.Smo.View v in database.Views)
                    {
                        if (!v.IsSystemObject)
                        {
                            scriptResult.Append(ScriptObject(new Urn[] { v.Urn }, scripter));
                        }
                    }
                }

                if (scriptStoredProcedures)
                {
                    server.SetDefaultInitFields(typeof(UserDefinedFunction), "IsSystemObject");
                    foreach (UserDefinedFunction udf in database.UserDefinedFunctions)
                    {
                        if (!udf.IsSystemObject)
                        {
                            scriptResult.Append(ScriptObject(new Urn[] { udf.Urn }, scripter));
                        }
                    }
                }

                // Create stored procedures
                if (scriptStoredProcedures)
                {
                    server.SetDefaultInitFields(typeof(StoredProcedure), "IsSystemObject");

                    foreach (StoredProcedure sp in database.StoredProcedures)
                    {
                        if (!sp.IsSystemObject)
                        {
                            scriptResult.Append(ScriptObject(new Urn[] { sp.Urn }, scripter));
                        }
                    }
                }
            }

            // Create table schemas
            if (scriptTableSchema)
            {
                server.SetDefaultInitFields(typeof(Microsoft.SqlServer.Management.Smo.Table), "IsSystemObject");
                foreach (Microsoft.SqlServer.Management.Smo.Table tb in database.Tables)
                {
                    if (!tb.IsSystemObject)
                    {
                        scriptResult.Append(ScriptObject(new Urn[] { tb.Urn }, scr));
                    }
                }
            }

            // Create table data
            if (scriptTableData)
            {
                Scripter scripter = new Scripter(server);
                scripter.Options.ScriptData = true ;
                server.SetDefaultInitFields(typeof(Microsoft.SqlServer.Management.Smo.Table), "IsSystemObject");

                foreach (Microsoft.SqlServer.Management.Smo.Table table in database.Tables)
                {
                    var script = scripter.EnumScript(new SqlSmoObject[] { table });
                    foreach (var line in script)
                        scriptResult.AppendLine(line);
                }
            }

            if (scriptStoredProcedures)
            {
                server.SetDefaultInitFields(typeof(Microsoft.SqlServer.Management.Smo.View),
                                            "IsSystemObject");
                foreach (Microsoft.SqlServer.Management.Smo.View v in database.Views)
                {
                    if (!v.IsSystemObject)
                    {
                        scriptResult.Append(ScriptObject(new Urn[] { v.Urn }, scr));
                    }
                }
            }

            if (scriptStoredProcedures)
            {
                server.SetDefaultInitFields(typeof(UserDefinedFunction), "IsSystemObject");
                foreach (UserDefinedFunction udf in database.UserDefinedFunctions)
                {
                    if (!udf.IsSystemObject)
                    {
                        scriptResult.Append(ScriptObject(new Urn[] { udf.Urn }, scr));
                    }
                }
            }

            // Create stored procedures
            if (scriptStoredProcedures)
            {
                server.SetDefaultInitFields(typeof(StoredProcedure), "IsSystemObject");

                foreach (StoredProcedure sp in database.StoredProcedures)
                {
                    if (!sp.IsSystemObject)
                    {
                        scriptResult.Append(ScriptObject(new Urn[] { sp.Urn }, scr));
                    }
                }
            }
            

            server.Disconnect();

            Response.Clear();
            Response.ClearHeaders();
            Response.ClearContent();



            // This header (RFC 1806) lets us set the suggested filename
            Response.AddHeader("Content-Disposition", "attachment; filename=" + Server.UrlEncode(filename) + "_export.sql");
            Response.Write(scriptResult.ToString());

            Response.End();
        }

        private bool IsValidChar(char c)
        {
            int i = Convert.ToInt32(c);
            int charA = Convert.ToInt32('A');
            int chara = Convert.ToInt32('a');
            int char0 = Convert.ToInt32('0');
            if ((i >= charA && i <= charA + 26) ||
                (i >= chara && i <= chara + 26) ||
                (i >= char0 && i <= char0 + 10))
                return true;
            else
                return false;
        }

        private string ScriptObject(Urn[] urns, Scripter scripter)
        {
            StringCollection sc = scripter.Script(urns);
            StringBuilder sb = new StringBuilder();

            foreach (string str in sc)
            {
                sb.Append(str + Environment.NewLine + "GO" +
                  Environment.NewLine + Environment.NewLine);
            }

            return sb.ToString();
        }
    }
}